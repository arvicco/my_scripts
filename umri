      ##
      # DdeInitialize Function
      # --------------------------------------------------------------------------------
      # The DdeInitialize function registers an application with the Dynamic Data Exchange Management Library 
      # (DDEML). An application must call this function before calling any other Dynamic Data Exchange 
      # Management Library (DDEML) function.
      # 
      # [*Syntax*] UINT DdeInitialize( LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes );
      # 
      # pidInst:: [in, out] Pointer to the application instance identifier. At initialization, this parameter 
      #           should point to 0. If the function succeeds, this parameter points to the instance 
      #           identifier for the application. This value should be passed as the idInst parameter in all 
      #           other DDEML functions that require it. If an application uses multiple instances of the 
      #           DDEML dynamic-link library (DLL), the application should provide a different callback 
      #           function for each instance.
      # If pidInst points to a nonzero value, reinitialization of the DDEML is implied. In this case, pidInst 
      # must point to a valid application-instance identifier.
      # pfnCallback:: [in] Pointer to the application-defined Dynamic Data Exchange (DDE) callback function. 
      #               This function processes DDE transactions sent by the system. For more information, see 
      #               the DdeCallback callback function.
      # afCmd:: [in] Specifies a set of APPCMD_, CBF_, and MF_ flags. The APPCMD_ flags provide special 
      #         instructions to DdeInitialize. The CBF_ flags specify filters that prevent specific types of 
      #         transactions from reaching the callback function. The MF_ flags specify the types of DDE 
      #         activity that a DDE monitoring application monitors. Using these flags enhances the 
      #         performance of a DDE application by eliminating unnecessary calls to the callback function.
      # This parameter can be one or more of the following values.
      # APPCLASS_MONITOR
      # Makes it possible for the application to monitor DDE activity in the system. This flag is for use by 
      # DDE monitoring applications. The application specifies the types of DDE activity to monitor by 
      # combining one or more monitor flags with the APPCLASS_MONITOR flag. For details, see the following 
      # Remarks section.
      # APPCLASS_STANDARD
      # Registers the application as a standard (nonmonitoring) DDEML application.
      # APPCMD_CLIENTONLY
      # Prevents the application from becoming a server in a DDE conversation. The application can only be a 
      # client. This flag reduces consumption of resources by the DDEML. It includes the functionality of the 
      # CBF_FAIL_ALLSVRXACTIONS flag.
      # APPCMD_FILTERINITS
      # Prevents the DDEML from sending XTYP_CONNECT and XTYP_WILDCONNECT transactions to the application 
      # until the application has created its string handles and registered its service names or has turned 
      # off filtering by a subsequent call to the DdeNameService or DdeInitialize function. This flag is 
      # always in effect when an application calls DdeInitialize for the first time, regardless of whether the 
      # application specifies the flag. On subsequent calls to DdeInitialize, not specifying this flag turns 
      # off the application's service-name filters, but specifying it turns on the application's service name 
      # filters.
      # CBF_FAIL_ALLSVRXACTIONS
      # Prevents the callback function from receiving server transactions. The system returns 
      # DDE_FNOTPROCESSED to each client that sends a transaction to this application. This flag is equivalent 
      # to combining all CBF_FAIL_ flags.
      # CBF_FAIL_ADVISES
      # Prevents the callback function from receiving XTYP_ADVSTART and XTYP_ADVSTOP transactions. The system 
      # returns DDE_FNOTPROCESSED to each client that sends an XTYP_ADVSTART or XTYP_ADVSTOP transaction to 
      # the server.
      # CBF_FAIL_CONNECTIONS
      # Prevents the callback function from receiving XTYP_CONNECT and XTYP_WILDCONNECT transactions.
      # CBF_FAIL_EXECUTES
      # Prevents the callback function from receiving XTYP_EXECUTE transactions. The system returns 
      # DDE_FNOTPROCESSED to a client that sends an XTYP_EXECUTE transaction to the server.
      # CBF_FAIL_POKES
      # Prevents the callback function from receiving XTYP_POKE transactions. The system returns 
      # DDE_FNOTPROCESSED to a client that sends an XTYP_POKE transaction to the server.
      # CBF_FAIL_REQUESTS
      # Prevents the callback function from receiving XTYP_REQUEST transactions. The system returns 
      # DDE_FNOTPROCESSED to a client that sends an XTYP_REQUEST transaction to the server.
      # CBF_FAIL_SELFCONNECTIONS
      # Prevents the callback function from receiving XTYP_CONNECT transactions from the application's own 
      # instance. This flag prevents an application from establishing a DDE conversation with its own 
      # instance. An application should use this flag if it needs to communicate with other instances of 
      # itself but not with itself.
      # CBF_SKIP_ALLNOTIFICATIONS
      # Prevents the callback function from receiving any notifications. This flag is equivalent to combining 
      # all CBF_SKIP_ flags.
      # CBF_SKIP_CONNECT_CONFIRMS
      # Prevents the callback function from receiving XTYP_CONNECT_CONFIRM notifications.
      # CBF_SKIP_DISCONNECTS
      # Prevents the callback function from receiving XTYP_DISCONNECT notifications.
      # CBF_SKIP_REGISTRATIONS
      # Prevents the callback function from receiving XTYP_REGISTER notifications.
      # CBF_SKIP_UNREGISTRATIONS
      # Prevents the callback function from receiving XTYP_UNREGISTER notifications.
      # MF_CALLBACKS
      # Notifies the callback function whenever a transaction is sent to any DDE callback function in the 
      # system.
      # MF_CONV
      # Notifies the callback function whenever a conversation is established or terminated.
      # MF_ERRORS
      # Notifies the callback function whenever a DDE error occurs.
      # MF_HSZ_INFO
      # Notifies the callback function whenever a DDE application creates, frees, or increments the usage 
      # count of a string handle or whenever a string handle is freed as a result of a call to the 
      # DdeUninitialize function.
      # MF_LINKS
      # Notifies the callback function whenever an advise loop is started or ended.
      # MF_POSTMSGS
      # Notifies the callback function whenever the system or an application posts a DDE message.
      # MF_SENDMSGS
      # Notifies the callback function whenever the system or an application sends a DDE message.
      # ulRes:: Reserved; must be set to zero.
      # 
      # *Returns*:: If the function succeeds, the return value is DMLERR_NO_ERROR.
      # If the function fails, the return value is one of the following values:
      # DMLERR_DLL_USAGE
      # DMLERR_INVALIDPARAMETER
      # DMLERR_SYS_ERROR
      # ---
      # *Remarks*:
      # An application that uses multiple instances of the DDEML must not pass DDEML objects between 
      # instances.
      # A DDE monitoring application should not attempt to perform DDE operations (establish conversations, 
      # issue transactions, and so on) within the context of the same application instance.
      # A synchronous transaction fails with a DMLERR_REENTRANCY error if any instance of the same task has a 
      # synchronous transaction already in progress.
      # The CBF_FAIL_ALLSVRXACTIONS flag causes the DDEML to filter all server transactions and can be changed 
      # by a subsequent call to DdeInitialize. The APPCMD_CLIENTONLY flag prevents the DDEML from creating key 
      # resources for the server and cannot be changed by a subsequent call to DdeInitialize.
      # There is an ANSI version and a Unicode version of DdeInitialize. The version called determines the 
      # type of the window procedures used to control DDE conversations (ANSI or Unicode), and the default 
      # value for the iCodePage member of the CONVCONTEXT structure (CP_WINANSI or CP_WINUNICODE).
      # Windows 95/98/Me: DdeInitializeW is supported by the Microsoft Layer for Unicode (MSLU). To use this, 
      # you must add certain files to your application, as outlined in Microsoft Layer for Unicode on Windows 
      # 95/98/Me Systems .
      # 
      # ---
      # <b>Enhanced (snake_case) API: </b>
      # 
      # :call-seq:
      #  success = dde_initialize(pid_inst, pfn_callback, af_cmd, ul_res)
      #  
      function :DdeInitialize, [:LPDWORD, :PFNCALLBACK, :DWORD, :DWORD], :UINT

    describe "#dde_initialize" do
      spec{ use{ success = DdeInitialize(pid_inst=0, pfn_callback=0, af_cmd=0, ul_res=0) }}
      spec{ use{ success = dde_initialize(pid_inst=0, pfn_callback=0, af_cmd=0, ul_res=0) }}

      it "original api registers an application with the Dynamic Data Exchange Management Library " do
        pending
        success = DdeInitialize(pid_inst=0, pfn_callback=0, af_cmd=0, ul_res=0)
      end

      it "snake_case api registers an application with the Dynamic Data Exchange Management Library " do
        pending
        success = dde_initialize(pid_inst=0, pfn_callback=0, af_cmd=0, ul_res=0)
      end

    end # describe dde_initialize
      # The MSG structure contains message information from a thread's message queue.
      # 
      # [*Typedef*] struct { HWND hwnd; UINT message; WPARAM wParam; LPARAM lParam; DWORD time; POINT pt } 
      #             MSG;
      # 
      # hwnd:: Handle to the window whose window procedure receives the message. hwnd is NULL when the message 
      #        is a thread message.
      # message:: Specifies the message identifier. Applications can only use the low word; the high word is 
      #           reserved by the system.
      # wParam:: Specifies additional information about the message. The exact meaning depends on the value of 
      #          the message member.
      # lParam:: Specifies additional information about the message. The exact meaning depends on the value of 
      #          the message member.
      # time:: Specifies the time at which the message was posted.
      # pt:: Specifies the cursor position, in screen coordinates, when the message was posted.
      # --------
      
class MSG < FFI::Struct
  layout :hwnd, :HWND,
         :message, :UINT,
         :w_param, :WPARAM,
         :l_param, :LPARAM,
         :time, :DWORD,
         :pt, :POINT
end
      # The MONCONVSTRUCT structure contains information about a Dynamic Data Exchange (DDE) conversation. A 
      # DDE monitoring application can use this structure to obtain information about a conversation that has 
      # been established or has terminated.
      # 
      # [*Typedef*] struct { UINT cb; BOOL fConnect; DWORD dwTime; HANDLE hTask; HSZ hszSvc; HSZ hszTopic; 
      #             HCONV hConvClient; HCONV hConvServer } MONCONVSTRUCT;
      # 
      # cb:: Specifies the structure's size, in bytes.
      # fConnect:: Indicates whether the conversation is currently established. A value of TRUE indicates the 
      #            conversation is established; FALSE indicates it is not.
      # dwTime:: Specifies the Windows time at which the conversation was established or terminated. Windows 
      #          time is the number of milliseconds that have elapsed since the system was booted.
      # hTask:: Handle to a task (application instance) that is a partner in the conversation.
      # hszSvc:: Handle to the service name on which the conversation is established.
      # hszTopic:: Handle to the topic name on which the conversation is established.
      # hConvClient:: Handle to the client conversation.
      # hConvServer:: Handle to the server conversation.
      # ---
      # *Remarks*:
      # Because string handles are local to the process, the hszSvc and hszTopic members are global atoms. 
      # Similarly, conversation handles are local to the instance; therefore, the hConvClient and hConvServer 
      # members are window handles.
      # The hConvClient and hConvServer members of the MONCONVSTRUCT structure do not hold the same value as 
      # would be seen by the applications engaged in the conversation. Instead, they hold a globally unique 
      # pair of values that identify the conversation.
      # Structure Information
      # Header Declared in Ddeml.h, include Windows.h
      
class MONCONVSTRUCT < FFI::Struct
  layout :cb, :UINT,
         :f_connect, :BOOL,
         :dw_time, :DWORD,
         :h_task, :HANDLE,
         :hsz_svc, :HSZ,
         :hsz_topic, :HSZ,
         :h_conv_client, :HCONV,
         :h_conv_server, :HCONV
end
      # MONCBSTRUCT Structure
      # --------------------------------------------------------------------------------
      # The MONCBSTRUCT structure contains information about the current Dynamic Data Exchange (DDE) 
      # transaction. A DDE debugging application can use this structure when monitoring transactions that the 
      # system passes to the DDE callback functions of other applications.
      # 
      # [*Typedef*] struct { UINT cb; DWORD dwTime; HANDLE hTask; DWORD dwRet; UINT wType; UINT wFmt; HCONV 
      #             hConv; HSZ hsz1; HSZ hsz2; HDDEDATA hData; ULONG_PTR dwData1; ULONG_PTR dwData2; 
      #             CONVCONTEXT cc; DWORD cbData; DWORD Data[8] } MONCBSTRUCT;
      # 
      # cb:: Specifies the structure's size, in bytes.
      # dwTime:: Specifies the Windows time at which the transaction occurred. Windows time is the number of 
      #          milliseconds that have elapsed since the system was booted.
      # hTask:: Handle to the task (application instance) containing the DDE callback function that received 
      #         the transaction.
      # dwRet:: Specifies the value returned by the DDE callback function that processed the transaction.
      # wType:: Specifies the transaction type.
      # wFmt:: Specifies the format of the data exchanged (if any) during the transaction.
      # hConv:: Handle to the conversation in which the transaction took place.
      # hsz1:: Handle to a string.
      # hsz2:: Handle to a string.
      # hData:: Handle to the data exchanged (if any) during the transaction.
      # dwData1:: Specifies additional data.
      # dwData2:: Specifies additional data.
      # cc:: Specifies a CONVCONTEXT structure containing language information used to share data in different 
      #      languages.
      # cbData:: Specifies the amount, in bytes, of data being passed with the transaction. This value can be 
      #          more than 32 bytes.
      # Data:: Contains the first 32 bytes of data being passed with the transaction (8 * sizeof(DWORD)).
      
class MONCBSTRUCT < FFI::Struct
  layout :cb, :UINT,
         :dw_time, :DWORD,
         :h_task, :HANDLE,
         :dw_ret, :DWORD,
         :w_type, :UINT,
         :w_fmt, :UINT,
         :h_conv, :HCONV,
         :hsz_1, :HSZ,
         :hsz_2, :HSZ,
         :h_data, :HDDEDATA,
         :dw_data_1, :ULONG_PTR,
         :dw_data_2, :ULONG_PTR,
         :cc, :CONVCONTEXT,
         :cb_data, :DWORD,
         :data, [:DWORD, 8]
end
    reads from infile, writes to stdout (FAILED - 1)


Result:       # The MSG structure contains message information from a thread's message queue.
      # 
      # [*Typedef*] struct { HWND hwnd; UINT message; WPARAM wParam; LPARAM lParam; DWORD time; POINT pt } 
      #             MSG;
      # 
      # hwnd:: Handle to the window whose window procedure receives the message. hwnd is NULL when the message 
      #        is a thread message.
      # message:: Specifies the message identifier. Applications can only use the low word; the high word is 
      #           reserved by the system.
      # wParam:: Specifies additional information about the message. The exact meaning depends on the value of 
      #          the message member.
      # lParam:: Specifies additional information about the message. The exact meaning depends on the value of 
      #          the message member.
      # time:: Specifies the time at which the message was posted.
      # pt:: Specifies the cursor position, in screen coordinates, when the message was posted.
      # --------
      
class MSG < FFI::Struct
  layout :hwnd, :HWND,
         :message, :UINT,
         :w_param, :WPARAM,
         :l_param, :LPARAM,
         :time, :DWORD,
         :pt, :POINT
end
    reads from temp file
  With explicit in and out files


Result:       # The MSG structure contains message information from a thread's message queue.
      # 
      # [*Typedef*] struct { HWND hwnd; UINT message; WPARAM wParam; LPARAM lParam; DWORD time; POINT pt } 
      #             MSG;
      # 
      # hwnd:: Handle to the window whose window procedure receives the message. hwnd is NULL when the message 
      #        is a thread message.
      # message:: Specifies the message identifier. Applications can only use the low word; the high word is 
      #           reserved by the system.
      # wParam:: Specifies additional information about the message. The exact meaning depends on the value of 
      #          the message member.
      # lParam:: Specifies additional information about the message. The exact meaning depends on the value of 
      #          the message member.
      # time:: Specifies the time at which the message was posted.
      # pt:: Specifies the cursor position, in screen coordinates, when the message was posted.
      # --------
      
class MSG < FFI::Struct
  layout :hwnd, :HWND,
         :message, :UINT,
         :w_param, :WPARAM,
         :l_param, :LPARAM,
         :time, :DWORD,
         :pt, :POINT
end
    reads from temp file
Script Execution (in general)
  trying to execute undefined script
    fails
  scripts without arguments
    cli.run executes pre-defined script
    script outputs to given stdout
    script gets value from given stdin
    script returns last value of run() method
  scripts with arguments
    cli.run executes pre-defined script
    script outputs to given stdout
    script receives given arguments in @argv
    script gets value from given stdin
    script returns last value of run() method
  printing usage
    unversioned script
      outputs script name, GEM version and usage note to stdout, then exits
    versioned script
      outputs script name, SCRIPT version and usage note to stdout, then exits
  scripts calling system
    calls system method on cli.kernel
  scripts with snake_case names
    executes scripts with snake_case name

1)
Spec::Mocks::MockExpectationError in 'MyScripts::Msdn With explicit infile, no outfile reads from infile, writes to stdout'
Mock "stdout" received :puts with unexpected arguments
  expected: ("      ##\n      # DdeInitialize Function\n      # --------------------------------------------------------------------------------\n      # The DdeInitialize function registers an application with the Dynamic Data Exchange Management Library \n      # (DDEML). An application must call this function before calling any other Dynamic Data Exchange \n      # Management Library (DDEML) function.\n      # \n      # [*Syntax*] UINT DdeInitialize( LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes );\n      # \n      # pidInst:: [in, out] Pointer to the application instance identifier. At initialization, this parameter \n      #           should point to 0. If the function succeeds, this parameter points to the instance \n      #           identifier for the application. This value should be passed as the idInst parameter in all \n      #           other DDEML functions that require it. If an application uses multiple instances of the \n      #           DDEML dynamic-link library (DLL), the application should provide a different callback \n      #           function for each instance.\n      # If pidInst points to a nonzero value, reinitialization of the DDEML is implied. In this case, pidInst \n      # must point to a valid application-instance identifier.\n      # pfnCallback:: [in] Pointer to the application-defined Dynamic Data Exchange (DDE) callback function. \n      #               This function processes DDE transactions sent by the system. For more information, see \n      #               the DdeCallback callback function.\n      # afCmd:: [in] Specifies a set of APPCMD_, CBF_, and MF_ flags. The APPCMD_ flags provide special \n      #         instructions to DdeInitialize. The CBF_ flags specify filters that prevent specific types of \n      #         transactions from reaching the callback function. The MF_ flags specify the types of DDE \n      #         activity that a DDE monitoring application monitors. Using these flags enhances the \n      #         performance of a DDE application by eliminating unnecessary calls to the callback function.\n      # This parameter can be one or more of the following values.\n      # APPCLASS_MONITOR\n      # Makes it possible for the application to monitor DDE activity in the system. This flag is for use by \n      # DDE monitoring applications. The application specifies the types of DDE activity to monitor by \n      # combining one or more monitor flags with the APPCLASS_MONITOR flag. For details, see the following \n      # Remarks section.\n      # APPCLASS_STANDARD\n      # Registers the application as a standard (nonmonitoring) DDEML application.\n      # APPCMD_CLIENTONLY\n      # Prevents the application from becoming a server in a DDE conversation. The application can only be a \n      # client. This flag reduces consumption of resources by the DDEML. It includes the functionality of the \n      # CBF_FAIL_ALLSVRXACTIONS flag.\n      # APPCMD_FILTERINITS\n      # Prevents the DDEML from sending XTYP_CONNECT and XTYP_WILDCONNECT transactions to the application \n      # until the application has created its string handles and registered its service names or has turned \n      # off filtering by a subsequent call to the DdeNameService or DdeInitialize function. This flag is \n      # always in effect when an application calls DdeInitialize for the first time, regardless of whether the \n      # application specifies the flag. On subsequent calls to DdeInitialize, not specifying this flag turns \n      # off the application's service-name filters, but specifying it turns on the application's service name \n      # filters.\n      # CBF_FAIL_ALLSVRXACTIONS\n      # Prevents the callback function from receiving server transactions. The system returns \n      # DDE_FNOTPROCESSED to each client that sends a transaction to this application. This flag is equivalent \n      # to combining all CBF_FAIL_ flags.\n      # CBF_FAIL_ADVISES\n      # Prevents the callback function from receiving XTYP_ADVSTART and XTYP_ADVSTOP transactions. The system \n      # returns DDE_FNOTPROCESSED to each client that sends an XTYP_ADVSTART or XTYP_ADVSTOP transaction to \n      # the server.\n      # CBF_FAIL_CONNECTIONS\n      # Prevents the callback function from receiving XTYP_CONNECT and XTYP_WILDCONNECT transactions.\n      # CBF_FAIL_EXECUTES\n      # Prevents the callback function from receiving XTYP_EXECUTE transactions. The system returns \n      # DDE_FNOTPROCESSED to a client that sends an XTYP_EXECUTE transaction to the server.\n      # CBF_FAIL_POKES\n      # Prevents the callback function from receiving XTYP_POKE transactions. The system returns \n      # DDE_FNOTPROCESSED to a client that sends an XTYP_POKE transaction to the server.\n      # CBF_FAIL_REQUESTS\n      # Prevents the callback function from receiving XTYP_REQUEST transactions. The system returns \n      # DDE_FNOTPROCESSED to a client that sends an XTYP_REQUEST transaction to the server.\n      # CBF_FAIL_SELFCONNECTIONS\n      # Prevents the callback function from receiving XTYP_CONNECT transactions from the application's own \n      # instance. This flag prevents an application from establishing a DDE conversation with its own \n      # instance. An application should use this flag if it needs to communicate with other instances of \n      # itself but not with itself.\n      # CBF_SKIP_ALLNOTIFICATIONS\n      # Prevents the callback function from receiving any notifications. This flag is equivalent to combining \n      # all CBF_SKIP_ flags.\n      # CBF_SKIP_CONNECT_CONFIRMS\n      # Prevents the callback function from receiving XTYP_CONNECT_CONFIRM notifications.\n      # CBF_SKIP_DISCONNECTS\n      # Prevents the callback function from receiving XTYP_DISCONNECT notifications.\n      # CBF_SKIP_REGISTRATIONS\n      # Prevents the callback function from receiving XTYP_REGISTER notifications.\n      # CBF_SKIP_UNREGISTRATIONS\n      # Prevents the callback function from receiving XTYP_UNREGISTER notifications.\n      # MF_CALLBACKS\n      # Notifies the callback function whenever a transaction is sent to any DDE callback function in the \n      # system.\n      # MF_CONV\n      # Notifies the callback function whenever a conversation is established or terminated.\n      # MF_ERRORS\n      # Notifies the callback function whenever a DDE error occurs.\n      # MF_HSZ_INFO\n      # Notifies the callback function whenever a DDE application creates, frees, or increments the usage \n      # count of a string handle or whenever a string handle is freed as a result of a call to the \n      # DdeUninitialize function.\n      # MF_LINKS\n      # Notifies the callback function whenever an advise loop is started or ended.\n      # MF_POSTMSGS\n      # Notifies the callback function whenever the system or an application posts a DDE message.\n      # MF_SENDMSGS\n      # Notifies the callback function whenever the system or an application sends a DDE message.\n      # ulRes:: Reserved; must be set to zero.\n      # \n      # *Returns*:: If the function succeeds, the return value is DMLERR_NO_ERROR.\n      # If the function fails, the return value is one of the following values:\n      # DMLERR_DLL_USAGE\n      # DMLERR_INVALIDPARAMETER\n      # DMLERR_SYS_ERROR\n      # ---\n      # *Remarks*:\n      # An application that uses multiple instances of the DDEML must not pass DDEML objects between \n      # instances.\n      # A DDE monitoring application should not attempt to perform DDE operations (establish conversations, \n      # issue transactions, and so on) within the context of the same application instance.\n      # A synchronous transaction fails with a DMLERR_REENTRANCY error if any instance of the same task has a \n      # synchronous transaction already in progress.\n      # The CBF_FAIL_ALLSVRXACTIONS flag causes the DDEML to filter all server transactions and can be changed \n      # by a subsequent call to DdeInitialize. The APPCMD_CLIENTONLY flag prevents the DDEML from creating key \n      # resources for the server and cannot be changed by a subsequent call to DdeInitialize.\n      # There is an ANSI version and a Unicode version of DdeInitialize. The version called determines the \n      # type of the window procedures used to control DDE conversations (ANSI or Unicode), and the default \n      # value for the iCodePage member of the CONVCONTEXT structure (CP_WINANSI or CP_WINUNICODE).\n      # Windows 95/98/Me: DdeInitializeW is supported by the Microsoft Layer for Unicode (MSLU). To use this, \n      # you must add certain files to your application, as outlined in Microsoft Layer for Unicode on Windows \n      # 95/98/Me Systems .\n      # \n      # ---\n      # <b>Enhanced (snake_case) API: </b>\n      # \n      # :call-seq:\n      #  success = dde_initialize(pid_inst, pfn_callback, af_cmd, ul_res)\n      #  \n      function :DdeInitialize, [:LPDWORD, :PFNCALLBACK, :DWORD, :DWORD], :UINT\n\n      describe \"#dde_initialize\" do\n        spec{ use{ success = DdeInitialize(pid_inst=0, pfn_callback=0, af_cmd=0, ul_res=0) }}\n        spec{ use{ success = dde_initialize(pid_inst=0, pfn_callback=0, af_cmd=0, ul_res=0) }}\n\n        it \"original api registers an application with the Dynamic Data Exchange Management Library \" do\n          pending\n          success = DdeInitialize(pid_inst=0, pfn_callback=0, af_cmd=0, ul_res=0)\n        end\n\n        it \"snake_case api registers an application with the Dynamic Data Exchange Management Library \" do\n          pending\n          success = dde_initialize(pid_inst=0, pfn_callback=0, af_cmd=0, ul_res=0)\n        end\n\n      end # describe dde_initialize\n")
       got: ([nil])
/Users/vb/Dev/apps/sys/my_scripts/spec/spec_helper.rb:51:in `block in entity_should_receive'

Finished in 0.611572 seconds

30 examples, 1 failure
